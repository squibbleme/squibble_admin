# encoding: utf-8
class Ability
  include CanCan::Ability

  def initialize(user, principal, employee = nil)
    alias_action :update, :destroy, to: :modify
    alias_action :create, :update, :read, :destroy, to: :crud

    # Abbruch, da für den Mandanten kein Objekt
    # übergeben wurde.
    #
    return if principal.nil?

    <% @modules.each do |backend_module| %>
      <% unless backend_module.permissions.empty? %>
        # Verarbeitung des Modules :<%= backend_module.key %>
        # ============================================================
        if principal.module? :<%= backend_module.key %>
          # Ausgabe der Berechtigungen für :<%= backend_module.key %> für sämtliche Rollen.
          #
          <% @roles.each do |role| %>
            <% unless role.permissions.where( module_id: backend_module.id ).empty? %>
              if user.role?(:<%= role.key %>, principal_id: principal.id)
                <% Acl::Permission.where( role_id: role.id, module_id: backend_module.id ).backend.each do |permission| %>
                  <%= permission.to_ability_class_entry -%>
                <% end %>
              end
            <% end %>
          <% end %>

          <% unless backend_module.permissions.where( :role_id.in => [nil, ''] ).empty? %>
            # Ausgabe der Berechtigungen für :<%= backend_module.key %> ohne verbundene Rolle.
            #
            <% Acl::Permission.where( :role_id.in => [nil, ''], module_id: backend_module.id ).backend.each do |permission| %>
              <%= permission.to_ability_class_entry -%>
            <% end %>
          <% end %>
        end
      <% end%>
    <% end %>

    # Ausgabe der Berechtigungen OHNE verbundene Module
    # ============================================================
    <% @roles.each do |role| %>
      <% unless role.permissions.where( :module_id.in => [nil, ''] ).empty? %>
        if user.role?(:<%= role.key %>, principal_id: principal.id)
          <% Acl::Permission.where( :module_id.in => [nil, ''], role_id: role.id ).backend.each do |permission| %>
            <%= permission.to_ability_class_entry -%>
          <% end %>
        end
      <% end%>
    <% end %>


    # Ausgabe der Berechtigungen OHNE verbundene Module und
    # OHNE verbundene Rolle
    # ============================================================
    <% unless Acl::Permission.where( :module_id.in => [nil, ''], :role_id.in => [nil, ''] ).empty? %>
      <% Acl::Permission.where( :module_id.in => [nil, ''], :role_id.in => [nil, ''] ).backend.each do |permission| %>
        <%= permission.to_ability_class_entry -%>
      <% end %>
    <% end%>
  end
end
